module test_EdgeForest
    !
    ! DESCRIPTION:
    !  Test the FATES edge forest code
    !
    use FatesConstantsMod, only : r8 => fates_r8
    use FatesEdgeForestMod, only : indexx
    use funit

    implicit none

    @TestCase
    type, extends(TestCase) :: TestEdgeForest

      real(r8), dimension(:), allocatable :: array_to_sort
      integer, dimension(:), allocatable  :: sorted_indices

      contains
        procedure :: setUp
        procedure :: tearDown
    end type TestEdgeForest

    real(r8), parameter :: tol = 1.e-13_r8

    integer, parameter :: n_to_sort = 5

    contains

      subroutine setUp(this)
        class(TestEdgeForest), intent(inout) :: this
        allocate(this%array_to_sort(n_to_sort))
        allocate(this%sorted_indices(n_to_sort))
      end subroutine setUp

      subroutine tearDown(this)
        class(TestEdgeForest), intent(inout) :: this
        if (allocated(this%array_to_sort)) deallocate(this%array_to_sort)
        if (allocated(this%sorted_indices)) deallocate(this%sorted_indices)
      end subroutine tearDown

      @Test
      subroutine indexx_alreadySorted(this)
        class(TestEdgeForest), intent(inout) :: this

        this%array_to_sort = (/ 1._r8, 1.62_r8, 2.72_r8, 3.14_r8, 6.28_r8 /)

        call indexx(this%array_to_sort, this%sorted_indices)

        @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

      end subroutine indexx_alreadySorted

      @Test
      subroutine indexx_reverseSorted(this)
        class(TestEdgeForest), intent(inout) :: this

        this%array_to_sort = (/ 6.28_r8, 3.14_r8, 2.72_r8, 1.62_r8, 1._r8 /)

        call indexx(this%array_to_sort, this%sorted_indices)

        @assertEqual((/ 5, 4, 3, 2, 1 /), this%sorted_indices)

      end subroutine indexx_reverseSorted

      @Test
      subroutine indexx_lowTie(this)
        class(TestEdgeForest), intent(inout) :: this

        this%array_to_sort = (/ 1._r8, 1._r8, 2.72_r8, 3.14_r8, 6.28_r8 /)

        call indexx(this%array_to_sort, this%sorted_indices)

        @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

      end subroutine indexx_lowTie

      @Test
      subroutine indexx_highTie(this)
        class(TestEdgeForest), intent(inout) :: this

        this%array_to_sort = (/ 1._r8, 1.62_r8, 2.72_r8, 3.14_r8, 3.14_r8 /)

        call indexx(this%array_to_sort, this%sorted_indices)

        @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

      end subroutine indexx_highTie

      @Test
      subroutine indexx_random(this)
        class(TestEdgeForest), intent(inout) :: this

        this%array_to_sort = (/ 3._r8, 8._r8, 10._r8, 2._r8, 7._r8 /)

        call indexx(this%array_to_sort, this%sorted_indices)

        @assertEqual((/ 4, 1, 5, 2, 3 /), this%sorted_indices)

      end subroutine indexx_random


      @Test
      subroutine indexx_all_equal(this)
        class(TestEdgeForest), intent(inout) :: this

        this%array_to_sort = (/ 1._r8, 1._r8, 1._r8, 1._r8, 1._r8 /)

        call indexx(this%array_to_sort, this%sorted_indices)

        @assertEqual((/ 1, 2, 3, 4, 5 /), this%sorted_indices)

      end subroutine indexx_all_equal

    end module test_EdgeForest